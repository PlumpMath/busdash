// Generated by CoffeeScript 1.8.0
(function() {
  var busdash,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  busdash = {};

  busdash.stringifyMVJ = function(j) {
    var doc, fem, mvj, recordedAt, s;
    mvj = j.MonitoredVehicleJourney;
    recordedAt = moment(j.recordedAtTime);
    doc = parseFloat(mvj.MonitoredCall.Extensions.Distances.DistanceFromCall);
    fem = Math.max(10000 - doc, 1000) / 5000;
    s = "<div class='busJourney " + status + "' style=\"font-size: " + fem + "em\">\n<!--		<div class=\"background\" style=\"width: " + (doc / 50) + ";\"></div> -->\n	<div class='PublishedLineName'>" + mvj.PublishedLineName + "</div>\n	<div class='PresentableDistance'>" + mvj.MonitoredCall.Extensions.Distances.PresentableDistance + "</div>\n	<div class=\"DistanceFromCall\">" + mvj.MonitoredCall.Extensions.Distances.DistanceFromCall + "m away</div>\n	<div class='ProgressRate'>" + mvj.ProgressRate + "</div>\n	<div class='RecordedAtTime'>Checked: " + (recordedAt.fromNow()) + "</div>\n</div>";
    return s;
  };

  busdash.printMSVS = function(msvs) {
    return _.each(msvs, function(msv) {
      return $('<div />').html(busdash.stringifyMVJ(msv)).appendTo('#buses');
    });
  };

  busdash.writeStopStatusForBus = function(STOP_ID, BUSNAMES) {
    $.ajax({
      url: 'http://bustime.mta.info/api/where/stop/MTA_' + STOP_ID + '.json?key=' + settings.apikey,
      jsonp: 'callback',
      dataType: 'jsonp',
      success: function(data) {
        return $("<div/>").html(data.data.name).appendTo("#stopname");
      }
    });
    $.ajax({
      url: 'http://bustime.mta.info/api/siri/stop-monitoring.json?key=' + settings.apikey + '&OperatorRef=MTA&MonitoringRef=' + STOP_ID,
      jsonp: 'callback',
      dataType: 'jsonp',
      success: function(data) {
        var validMSVs;
        validMSVs = _.filter(data.Siri.ServiceDelivery.StopMonitoringDelivery[0].MonitoredStopVisit, function(msv) {
          var _ref;
          console.log(msv);
          return _ref = msv.MonitoredVehicleJourney.PublishedLineName, __indexOf.call(BUSNAMES, _ref) >= 0;
        });
        busdash.printMSVS(validMSVs);
      }
    });
  };

  $(document).ready(function() {
    busdash.writeStopStatusForBus(settings.stop_id, settings.buses);
    return setTimeout(function() {
      return window.location.reload(1);
    }, 30000);
  });

}).call(this);
